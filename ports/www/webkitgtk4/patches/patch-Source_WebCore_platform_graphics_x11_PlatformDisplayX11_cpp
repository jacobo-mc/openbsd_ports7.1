From 72fad08f2bfe7d2744c3217fe0ec0afcc671c53e Mon Sep 17 00:00:00 2001
From: Carlos Garcia Campos <carlosgc@webkit.org>
Date: Fri, 1 Apr 2022 09:00:32 +0000
Subject: [PATCH] REGRESSION(r290360): [GLX] Crash on process exit https://bugs.webkit.org/show_bug.cgi?id=238494

Index: Source/WebCore/platform/graphics/x11/PlatformDisplayX11.cpp
--- Source/WebCore/platform/graphics/x11/PlatformDisplayX11.cpp.orig
+++ Source/WebCore/platform/graphics/x11/PlatformDisplayX11.cpp
@@ -28,6 +28,7 @@
 
 #include "GLContext.h"
 #include "XErrorTrapper.h"
+#include <cstdlib>
 
 #if PLATFORM(X11)
 #include <X11/Xatom.h>
@@ -36,7 +37,12 @@
 #if PLATFORM(GTK)
 #include <X11/Xutil.h>
 #include <X11/extensions/Xdamage.h>
+#if USE(GTK4)
+#include <gdk/x11/gdkx.h>
+#else
+#include <gdk/gdkx.h>
 #endif
+#endif
 
 #if USE(EGL)
 #include <EGL/egl.h>
@@ -55,29 +61,69 @@ std::unique_ptr<PlatformDisplay> PlatformDisplayX11::c
     if (!display)
         return nullptr;
 
-    return std::unique_ptr<PlatformDisplayX11>(new PlatformDisplayX11(display, NativeDisplayOwned::Yes));
+    return std::unique_ptr<PlatformDisplayX11>(new PlatformDisplayX11(display));
 }
 
-std::unique_ptr<PlatformDisplay> PlatformDisplayX11::create(Display* display)
+#if PLATFORM(GTK)
+std::unique_ptr<PlatformDisplay> PlatformDisplayX11::create(GdkDisplay* display)
 {
-    return std::unique_ptr<PlatformDisplayX11>(new PlatformDisplayX11(display, NativeDisplayOwned::No));
+    return std::unique_ptr<PlatformDisplayX11>(new PlatformDisplayX11(display));
 }
+#endif
 
-PlatformDisplayX11::PlatformDisplayX11(Display* display, NativeDisplayOwned displayOwned)
-    : PlatformDisplay(displayOwned)
-    , m_display(display)
+static inline void clearSharingGLContextAtExit()
 {
+#if USE(GLX)
+    // In X11 only one PlatformDisplay instance is allowed per process which is the sharedDisplay one.
+    // We install an atexit handler to clear the sharing GL context to ensure it's released before
+    // the constructor is called, because clearing the context in X11 requires to access PlatformDisplay::sharedDisplay()
+    // and calling it from its constructor causes issues in some systems. See https://bugs.webkit.org/show_bug.cgi?id=238494.
+    static std::once_flag onceKey;
+    std::call_once(onceKey, [] {
+        std::atexit([] {
+            PlatformDisplay::sharedDisplay().clearSharingGLContext();
+        });
+    });
+#endif
 }
 
+PlatformDisplayX11::PlatformDisplayX11(Display* display)
+    : m_display(display)
+{
+    clearSharingGLContextAtExit();
+}
+
+#if PLATFORM(GTK)
+PlatformDisplayX11::PlatformDisplayX11(GdkDisplay* display)
+    : PlatformDisplay(display)
+    , m_display(GDK_DISPLAY_XDISPLAY(display))
+{
+    clearSharingGLContextAtExit();
+}
+#endif
+
 PlatformDisplayX11::~PlatformDisplayX11()
 {
 #if USE(EGL) || USE(GLX)
-    // Clear the sharing context before releasing the display.
-    m_sharingGLContext = nullptr;
+    ASSERT(!m_sharingGLContext);
 #endif
-    if (m_nativeDisplayOwned == NativeDisplayOwned::Yes)
+
+#if PLATFORM(GTK)
+    bool nativeDisplayOwned = !m_sharedDisplay;
+#else
+    bool nativeDisplayOwned = true;
+#endif
+    if (nativeDisplayOwned)
         XCloseDisplay(m_display);
 }
+
+#if PLATFORM(GTK)
+void PlatformDisplayX11::sharedDisplayDidClose()
+{
+    PlatformDisplay::sharedDisplayDidClose();
+    m_display = nullptr;
+}
+#endif
 
 #if USE(EGL)
 void PlatformDisplayX11::initializeEGLDisplay()
