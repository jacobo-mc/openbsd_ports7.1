From 72fad08f2bfe7d2744c3217fe0ec0afcc671c53e Mon Sep 17 00:00:00 2001
From: Carlos Garcia Campos <carlosgc@webkit.org>
Date: Fri, 1 Apr 2022 09:00:32 +0000
Subject: [PATCH] REGRESSION(r290360): [GLX] Crash on process exit https://bugs.webkit.org/show_bug.cgi?id=238494

Index: Source/WebCore/platform/graphics/PlatformDisplay.cpp
--- Source/WebCore/platform/graphics/PlatformDisplay.cpp.orig
+++ Source/WebCore/platform/graphics/PlatformDisplay.cpp
@@ -96,25 +96,14 @@ std::unique_ptr<PlatformDisplay> PlatformDisplay::crea
     if (gtk_init_check(nullptr, nullptr)) {
         GdkDisplay* display = gdk_display_manager_get_default_display(gdk_display_manager_get());
 #if PLATFORM(X11)
-        if (GDK_IS_X11_DISPLAY(display)) {
-            auto platformDisplay = PlatformDisplayX11::create(GDK_DISPLAY_XDISPLAY(display));
-#if USE(ATSPI) && USE(GTK4)
-            if (const char* atspiBusAddress = static_cast<const char*>(g_object_get_data(G_OBJECT(display), "-gtk-atspi-bus-address")))
-                platformDisplay->m_accessibilityBusAddress = String::fromUTF8(atspiBusAddress);
+        if (GDK_IS_X11_DISPLAY(display))
+            return PlatformDisplayX11::create(display);
 #endif
-            return platformDisplay;
-        }
-#endif
+
 #if PLATFORM(WAYLAND)
-        if (GDK_IS_WAYLAND_DISPLAY(display)) {
-            auto platformDisplay = PlatformDisplayWayland::create(gdk_wayland_display_get_wl_display(display));
-#if USE(ATSPI) && USE(GTK4)
-            if (const char* atspiBusAddress = static_cast<const char*>(g_object_get_data(G_OBJECT(display), "-gtk-atspi-bus-address")))
-                platformDisplay->m_accessibilityBusAddress = String::fromUTF8(atspiBusAddress);
+        if (GDK_IS_WAYLAND_DISPLAY(display))
+            return PlatformDisplayWayland::create(display);
 #endif
-            return platformDisplay;
-        }
-#endif
     }
 #endif // PLATFORM(GTK)
 
@@ -174,19 +163,45 @@ void PlatformDisplay::setSharedDisplayForCompositing(P
     s_sharedDisplayForCompositing = &display;
 }
 
-PlatformDisplay::PlatformDisplay(NativeDisplayOwned displayOwned)
-    : m_nativeDisplayOwned(displayOwned)
+PlatformDisplay::PlatformDisplay()
 #if USE(EGL)
-    , m_eglDisplay(EGL_NO_DISPLAY)
+    : m_eglDisplay(EGL_NO_DISPLAY)
 #endif
 {
 }
 
+#if PLATFORM(GTK)
+PlatformDisplay::PlatformDisplay(GdkDisplay* display)
+    : m_sharedDisplay(display)
+{
+#if USE(ATSPI) && USE(GTK4)
+    if (const char* atspiBusAddress = static_cast<const char*>(g_object_get_data(G_OBJECT(display), "-gtk-atspi-bus-address")))
+        m_accessibilityBusAddress = String::fromUTF8(atspiBusAddress);
+#endif
+
+    g_signal_connect(m_sharedDisplay.get(), "closed", G_CALLBACK(+[](GdkDisplay*, gboolean, gpointer userData) {
+        auto& platformDisplay = *static_cast<PlatformDisplay*>(userData);
+        platformDisplay.sharedDisplayDidClose();
+    }), this);
+}
+
+void PlatformDisplay::sharedDisplayDidClose()
+{
+#if USE(EGL) || USE(GLX)
+    clearSharingGLContext();
+#endif
+}
+#endif
+
 PlatformDisplay::~PlatformDisplay()
 {
 #if USE(EGL) && !PLATFORM(WIN)
     ASSERT(m_eglDisplay == EGL_NO_DISPLAY);
 #endif
+#if PLATFORM(GTK)
+    if (m_sharedDisplay)
+        g_signal_handlers_disconnect_by_data(m_sharedDisplay.get(), this);
+#endif
     if (s_sharedDisplayForCompositing == this)
         s_sharedDisplayForCompositing = nullptr;
 }
@@ -198,6 +213,11 @@ GLContext* PlatformDisplay::sharingGLContext()
         m_sharingGLContext = GLContext::createSharingContext(*this);
     return m_sharingGLContext.get();
 }
+
+void PlatformDisplay::clearSharingGLContext()
+{
+    m_sharingGLContext = nullptr;
+}
 #endif
 
 #if USE(EGL)
@@ -274,7 +294,7 @@ void PlatformDisplay::terminateEGLDisplay()
     m_gstGLDisplay = nullptr;
     m_gstGLContext = nullptr;
 #endif
-    m_sharingGLContext = nullptr;
+    clearSharingGLContext();
     ASSERT(m_eglDisplayInitialized);
     if (m_eglDisplay == EGL_NO_DISPLAY)
         return;
